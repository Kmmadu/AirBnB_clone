#!/usr/bin/python3
""" FIlestorage: serializes instances to a json file
and deserializes JSOn file to instances
"""
import json
from models.base_model import BaseModel
from models.user import User
from models.state import State
from models.city import City
from models.amenity import Amenity
from models.place import Place
from models.review import Review


class FileStorage:
    """ A class for serializing and deserializing instances """
    CLASSES = {
        'BaseModel': BaseModel,
        'User': User
        }

    __file_path = "file.json"
    __objects = {}

    def all(self):
        """ returns the dictionary __ojects """
        return self.__objects

    def new(self, obj):
        """ sets in __objects the obj with key """
        key = "{}.{}".format(type(obj).__name__, obj.id)
        self.__objects[key] = obj

    def save(self):
        """ serializes __objects to the JSON file """
        serialized_dict = {}
        for key, obj in self.__objects.items():
            serialized_dict[key] = obj.to_dict()

        with open(self.__file_path, 'w') as f:
            json.dump(serialized_dict, f)

    def reload(self):
        """ Deserializes the JSON file to __objects """
        try:
            with open(self.__file_path) as f:
                data = json.load(f)

            for o in data.values():
                class_name = o["__class__"]
                del o["__class__"]
                self.new(eval(class_name)(**o))

        except FileNotFoundError:
            pass
